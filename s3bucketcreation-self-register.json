{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Workshop S3 template - Self-registering for dynamic accounts",
  "Parameters": {
    "BucketPrefix": {
      "Type": "String",
      "Default": "dsbucket",
      "Description": "Prefix for S3 bucket name"
    },
    "SourceBucket": {
      "Type": "String",
      "Default": "wrkshp-qbiz-data",
      "Description": "Source S3 bucket containing files to copy"
    },
    "RegistrationApiUrl": {
      "Type": "String",
      "Default": "https://your-api-gateway-url/register",
      "Description": "API endpoint to register workshop accounts"
    }
  },
  "Resources": {
    "AccountRegistration": {
      "Type": "Custom::AccountRegistration",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["RegistrationFunction", "Arn"]},
        "AccountId": {"Ref": "AWS::AccountId"},
        "RegistrationApiUrl": {"Ref": "RegistrationApiUrl"}
      }
    },
    "RegistrationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "RegistrationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python3.12",
        "Timeout": 60,
        "Handler": "index.handler",
        "Role": {"Fn::GetAtt": ["RegistrationRole", "Arn"]},
        "Code": {
          "ZipFile": "import json\nimport urllib.request\nimport cfnresponse\n\ndef handler(event, context):\n    try:\n        if event['RequestType'] == 'Delete':\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n            return\n        \n        account_id = event['ResourceProperties']['AccountId']\n        api_url = event['ResourceProperties']['RegistrationApiUrl']\n        \n        # Register account with the workshop API\n        data = json.dumps({'account_id': account_id}).encode('utf-8')\n        req = urllib.request.Request(api_url, data=data, headers={'Content-Type': 'application/json'})\n        \n        try:\n            with urllib.request.urlopen(req) as response:\n                result = json.loads(response.read().decode('utf-8'))\n                print(f'Registration result: {result}')\n        except Exception as e:\n            print(f'Registration failed, continuing anyway: {str(e)}')\n        \n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {\n            'AccountId': account_id,\n            'Status': 'Registered'\n        })\n        \n    except Exception as e:\n        print(f'Error: {str(e)}')\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {\n            'AccountId': event['ResourceProperties']['AccountId'],\n            'Status': 'Failed',\n            'Error': str(e)\n        })"
        }
      }
    },
    "FileUploadRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:ListBucket",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${SourceBucket}"},
                    {"Fn::Sub": "arn:aws:s3:::${SourceBucket}/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:ListBucket",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": [
                    {"Fn::GetAtt": ["creates3bucket", "Arn"]},
                    {"Fn::Sub": "${creates3bucket.Arn}/*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "FileUploadFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python3.12",
        "Timeout": 300,
        "Handler": "index.handler",
        "Role": {"Fn::GetAtt": ["FileUploadRole", "Arn"]},
        "Code": {
          "ZipFile": "import boto3\nimport cfnresponse\nimport json\nimport time\n\ndef handler(event, context):\n    try:\n        if event['RequestType'] == 'Delete':\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n            return\n        \n        source_bucket = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        \n        print(f'Copying from {source_bucket} to {dest_bucket}')\n        \n        # Wait a bit for account registration to propagate\n        time.sleep(10)\n        \n        s3 = boto3.client('s3')\n        \n        # Test access to source bucket\n        try:\n            response = s3.list_objects_v2(Bucket=source_bucket, MaxKeys=1)\n            print(f'Source bucket accessible')\n        except Exception as e:\n            error_msg = f'Cannot access source bucket {source_bucket}: {str(e)}'\n            print(error_msg)\n            cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': error_msg})\n            return\n        \n        # Copy files\n        paginator = s3.get_paginator('list_objects_v2')\n        pages = paginator.paginate(Bucket=source_bucket)\n        \n        files_copied = 0\n        for page in pages:\n            if 'Contents' in page:\n                for obj in page['Contents']:\n                    key = obj['Key']\n                    print(f'Copying {key}')\n                    copy_source = {'Bucket': source_bucket, 'Key': key}\n                    s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)\n                    files_copied += 1\n        \n        print(f'Successfully copied {files_copied} files')\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {'FilesUploaded': files_copied})\n        \n    except Exception as e:\n        print(f'Error: {str(e)}')\n        cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})"
        }
      }
    },
    "creates3bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Fn::Sub": "${AWS::AccountId}-${BucketPrefix}-${AWS::StackName}"},
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {"ServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {"Status": "Enabled"}
      }
    },
    "UploadFiles": {
      "Type": "Custom::FileUpload",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["FileUploadFunction", "Arn"]},
        "SourceBucket": {"Ref": "SourceBucket"},
        "DestBucket": {"Ref": "creates3bucket"}
      },
      "DependsOn": ["creates3bucket", "AccountRegistration"]
    }
  },
  "Outputs": {
    "S3BucketName": {
      "Description": "Name of the created S3 bucket",
      "Value": {"Ref": "creates3bucket"}
    },
    "FilesUploaded": {
      "Description": "Number of files automatically uploaded",
      "Value": {"Fn::GetAtt": ["UploadFiles", "FilesUploaded"]}
    },
    "AccountRegistration": {
      "Description": "Account registration status",
      "Value": {"Fn::GetAtt": ["AccountRegistration", "Status"]}
    }
  }
}
