{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Workshop S3 template - Simplified with predefined file list",
  "Parameters": {
    "BucketPrefix": {
      "Type": "String",
      "Default": "dsbucket",
      "Description": "Prefix for S3 bucket name"
    },
    "SourceBucket": {
      "Type": "String",
      "Default": "wrkshp-qbiz-data",
      "Description": "Source S3 bucket containing files to copy"
    },
    "SourceAccountId": {
      "Type": "String",
      "Default": "953841955037",
      "Description": "AWS Account ID that owns the source bucket"
    }
  },
  "Resources": {
    "FileUploadRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${SourceBucket}"},
                    {"Fn::Sub": "arn:aws:s3:::${SourceBucket}/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:ListBucket",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": [
                    {"Fn::GetAtt": ["WorkshopS3Bucket", "Arn"]},
                    {"Fn::Sub": "${WorkshopS3Bucket.Arn}/*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "FileUploadFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python3.12",
        "Timeout": 300,
        "Handler": "index.handler",
        "Role": {"Fn::GetAtt": ["FileUploadRole", "Arn"]},
        "Code": {
          "ZipFile": "import boto3\nimport cfnresponse\nimport json\n\ndef handler(event, context):\n    try:\n        print(f'Event: {json.dumps(event, default=str)}')\n        if event['RequestType'] == 'Delete':\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n            return\n        \n        source_bucket = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        source_account = event['ResourceProperties']['SourceAccountId']\n        \n        print(f'Copying from {source_bucket} (account: {source_account}) to {dest_bucket}')\n        \n        # Predefined list of workshop files to copy\n        workshop_files = [\n            'INV_001.pdf',\n            'Quotation12345.pdf',\n            'block-reference-description.xlsx',\n            'haltcodedescription.xlsx',\n            'inv-po-halt-cd-relation.xlsx',\n            'invoice-payment-details.xlsx'\n        ]\n        \n        s3 = boto3.client('s3')\n        files_copied = 0\n        failed_files = []\n        \n        # Test source bucket access first\n        try:\n            response = s3.list_objects_v2(Bucket=source_bucket, MaxKeys=1)\n            print(f'Source bucket {source_bucket} is accessible')\n        except Exception as e:\n            error_msg = f'Cannot access source bucket {source_bucket}: {str(e)}'\n            print(error_msg)\n            print('This likely means the source bucket policy needs to allow this account')\n            cfnresponse.send(event, context, cfnresponse.FAILED, {\n                'Error': error_msg,\n                'Solution': f'Add account {context.invoked_function_arn.split(\":\")[4]} to source bucket policy'\n            })\n            return\n        \n        # Copy each predefined file\n        for filename in workshop_files:\n            try:\n                print(f'Copying {filename}...')\n                \n                # Check if file exists in source bucket\n                try:\n                    s3.head_object(Bucket=source_bucket, Key=filename)\n                except s3.exceptions.NoSuchKey:\n                    print(f'File {filename} not found in source bucket, skipping')\n                    failed_files.append(f'{filename} (not found)')\n                    continue\n                \n                # Copy file\n                copy_source = {'Bucket': source_bucket, 'Key': filename}\n                s3.copy_object(\n                    CopySource=copy_source,\n                    Bucket=dest_bucket,\n                    Key=filename\n                )\n                \n                files_copied += 1\n                print(f'Successfully copied {filename}')\n                \n            except Exception as e:\n                error_msg = f'Failed to copy {filename}: {str(e)}'\n                print(error_msg)\n                failed_files.append(f'{filename} ({str(e)})')\n                continue\n        \n        # Prepare result\n        result = {\n            'FilesUploaded': files_copied,\n            'TotalFiles': len(workshop_files),\n            'SourceBucket': source_bucket,\n            'DestinationBucket': dest_bucket\n        }\n        \n        if failed_files:\n            result['FailedFiles'] = failed_files\n            print(f'Some files failed to copy: {failed_files}')\n        \n        if files_copied == 0:\n            cfnresponse.send(event, context, cfnresponse.FAILED, {\n                'Error': 'No files were copied successfully',\n                'FailedFiles': failed_files\n            })\n        else:\n            print(f'Successfully copied {files_copied}/{len(workshop_files)} files')\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, result)\n        \n    except Exception as e:\n        error_msg = f'Unexpected error: {str(e)}'\n        print(error_msg)\n        cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': error_msg})"
        }
      }
    },
    "WorkshopS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": {"Fn::Sub": "${AWS::AccountId}-${BucketPrefix}-${AWS::StackName}"},
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "BucketOwnerEnforced"
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "CopyWorkshopFiles": {
      "Type": "Custom::FileUpload",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["FileUploadFunction", "Arn"]},
        "SourceBucket": {"Ref": "SourceBucket"},
        "DestBucket": {"Ref": "WorkshopS3Bucket"},
        "SourceAccountId": {"Ref": "SourceAccountId"}
      },
      "DependsOn": "WorkshopS3Bucket"
    }
  },
  "Outputs": {
    "WorkshopS3BucketName": {
      "Description": "Name of the created workshop S3 bucket",
      "Value": {"Ref": "WorkshopS3Bucket"},
      "Export": {
        "Name": {"Fn::Sub": "${AWS::StackName}-S3BucketName"}
      }
    },
    "FilesUploaded": {
      "Description": "Number of files successfully uploaded",
      "Value": {"Fn::GetAtt": ["CopyWorkshopFiles", "FilesUploaded"]}
    },
    "TotalFiles": {
      "Description": "Total number of workshop files",
      "Value": {"Fn::GetAtt": ["CopyWorkshopFiles", "TotalFiles"]}
    },
    "WorkshopAccountId": {
      "Description": "AWS Account ID of this workshop participant",
      "Value": {"Ref": "AWS::AccountId"}
    }
  }
}
