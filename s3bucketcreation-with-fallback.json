{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Networking Resources CloudFormation template with sample data - Fallback Version",
  "Parameters": {
    "BucketPrefix": {
      "Type": "String",
      "Default": "dsbucket",
      "Description": "Prefix for S3 bucket name"
    },
    "SourceBucket": {
      "Type": "String",
      "Default": "wrkshp-qbiz-data",
      "Description": "Source S3 bucket containing files to copy"
    },
    "SourcePrefix": {
      "Type": "String",
      "Default": "",
      "Description": "Optional prefix/folder path in source bucket"
    },
    "CrossAccountRoleArn": {
      "Type": "String",
      "Default": "arn:aws:iam::894924264385:role/WorkshopCrossAccountRole",
      "Description": "ARN of the cross-account role to assume for accessing source bucket"
    }
  },
  "Resources": {
    "FileUploadRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:AssumeRole"
                  ],
                  "Resource": [
                    {"Ref": "CrossAccountRoleArn"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:ListBucket",
                    "s3:GetBucketLocation",
                    "s3:GetBucketVersioning"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${SourceBucket}"},
                    {"Fn::Sub": "arn:aws:s3:::${SourceBucket}/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:ListBucket",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": [
                    {"Fn::GetAtt": ["creates3bucket", "Arn"]},
                    {"Fn::Sub": "${creates3bucket.Arn}/*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "FileUploadFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "python3.12",
        "Timeout": 300,
        "Handler": "index.handler",
        "Role": {"Fn::GetAtt": ["FileUploadRole", "Arn"]},
        "Code": {
          "ZipFile": "import boto3\nimport cfnresponse\n\ndef handler(event, context):\n    try:\n        print(f'Event: {event}')\n        if event['RequestType'] == 'Delete':\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n            return\n        \n        source_bucket = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        prefix = event['ResourceProperties'].get('Prefix', '')\n        cross_account_role = event['ResourceProperties']['CrossAccountRoleArn']\n        \n        print(f'Copying from {source_bucket} to {dest_bucket}')\n        \n        # Try cross-account role first, then fallback to direct access\n        source_s3 = None\n        sts = boto3.client('sts')\n        \n        try:\n            print(f'Attempting to assume role: {cross_account_role}')\n            assumed_role = sts.assume_role(\n                RoleArn=cross_account_role,\n                RoleSessionName='WorkshopFileUpload'\n            )\n            \n            # Create S3 client with assumed role credentials\n            source_s3 = boto3.client(\n                's3',\n                aws_access_key_id=assumed_role['Credentials']['AccessKeyId'],\n                aws_secret_access_key=assumed_role['Credentials']['SecretAccessKey'],\n                aws_session_token=assumed_role['Credentials']['SessionToken']\n            )\n            print('Successfully assumed cross-account role')\n            \n        except Exception as e:\n            print(f'Cross-account role assumption failed: {str(e)}')\n            print('Falling back to direct S3 access')\n            source_s3 = boto3.client('s3')\n        \n        # Regular S3 client for destination bucket\n        dest_s3 = boto3.client('s3')\n        \n        # Check if source bucket exists and is accessible\n        try:\n            location = source_s3.get_bucket_location(Bucket=source_bucket)\n            print(f'Source bucket location: {location}')\n            \n            response = source_s3.list_objects_v2(Bucket=source_bucket, MaxKeys=1)\n            print(f'Source bucket accessible, found {response.get(\"KeyCount\", 0)} objects')\n        except Exception as e:\n            error_msg = f'Cannot access source bucket {source_bucket}: {str(e)}'\n            print(error_msg)\n            cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': error_msg})\n            return\n        \n        # List objects in source bucket\n        paginator = source_s3.get_paginator('list_objects_v2')\n        pages = paginator.paginate(Bucket=source_bucket, Prefix=prefix)\n        \n        files_copied = 0\n        for page in pages:\n            if 'Contents' in page:\n                for obj in page['Contents']:\n                    key = obj['Key']\n                    print(f'Copying {key}')\n                    \n                    try:\n                        # Get object from source bucket\n                        source_obj = source_s3.get_object(Bucket=source_bucket, Key=key)\n                        \n                        # Put object to destination bucket\n                        dest_s3.put_object(\n                            Bucket=dest_bucket,\n                            Key=key,\n                            Body=source_obj['Body'].read(),\n                            ContentType=source_obj.get('ContentType', 'binary/octet-stream')\n                        )\n                        files_copied += 1\n                    except Exception as copy_error:\n                        print(f'Failed to copy {key}: {str(copy_error)}')\n                        # Continue with other files\n        \n        print(f'Successfully copied {files_copied} files')\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {'FilesUploaded': files_copied})\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})"
        }
      }
    },
    "creates3bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": {"Fn::Sub": "${AWS::AccountId}-${BucketPrefix}-${AWS::StackName}"},
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "BucketOwnerEnforced"
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "UploadFiles": {
      "Type": "Custom::FileUpload",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["FileUploadFunction", "Arn"]},
        "SourceBucket": {"Ref": "SourceBucket"},
        "DestBucket": {"Ref": "creates3bucket"},
        "Prefix": {"Ref": "SourcePrefix"},
        "CrossAccountRoleArn": {"Ref": "CrossAccountRoleArn"}
      },
      "DependsOn": "creates3bucket"
    }
  },
  "Outputs": {
    "S3BucketName": {
      "Description": "Name of the created S3 bucket",
      "Value": {"Ref": "creates3bucket"},
      "Export": {
        "Name": {"Fn::Sub": "${AWS::StackName}-S3BucketName"}
      }
    },
    "FilesUploaded": {
      "Description": "Number of files automatically uploaded",
      "Value": {"Fn::GetAtt": ["UploadFiles", "FilesUploaded"]}
    }
  }
}
